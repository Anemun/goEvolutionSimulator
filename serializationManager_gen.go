package main

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *SerBot) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BotIndex":
			z.BotIndex, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "BotIndex")
				return
			}
		case "BotCoordX":
			z.BotCoordX, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "BotCoordX")
				return
			}
		case "BotCoordY":
			z.BotCoordY, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "BotCoordY")
				return
			}
		case "BotEnergy":
			z.BotEnergy, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "BotEnergy")
				return
			}
		case "BotGenome":
			z.BotGenome, err = dc.ReadBytes(z.BotGenome)
			if err != nil {
				err = msgp.WrapError(err, "BotGenome")
				return
			}
		case "BotOrgans":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "BotOrgans")
				return
			}
			if cap(z.BotOrgans) >= int(zb0002) {
				z.BotOrgans = (z.BotOrgans)[:zb0002]
			} else {
				z.BotOrgans = make([]*SerOrgan, zb0002)
			}
			for za0001 := range z.BotOrgans {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "BotOrgans", za0001)
						return
					}
					z.BotOrgans[za0001] = nil
				} else {
					if z.BotOrgans[za0001] == nil {
						z.BotOrgans[za0001] = new(SerOrgan)
					}
					err = z.BotOrgans[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "BotOrgans", za0001)
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SerBot) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "BotIndex"
	err = en.Append(0x86, 0xa8, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.BotIndex)
	if err != nil {
		err = msgp.WrapError(err, "BotIndex")
		return
	}
	// write "BotCoordX"
	err = en.Append(0xa9, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x58)
	if err != nil {
		return
	}
	err = en.WriteInt(z.BotCoordX)
	if err != nil {
		err = msgp.WrapError(err, "BotCoordX")
		return
	}
	// write "BotCoordY"
	err = en.Append(0xa9, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x59)
	if err != nil {
		return
	}
	err = en.WriteInt(z.BotCoordY)
	if err != nil {
		err = msgp.WrapError(err, "BotCoordY")
		return
	}
	// write "BotEnergy"
	err = en.Append(0xa9, 0x42, 0x6f, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79)
	if err != nil {
		return
	}
	err = en.WriteInt(z.BotEnergy)
	if err != nil {
		err = msgp.WrapError(err, "BotEnergy")
		return
	}
	// write "BotGenome"
	err = en.Append(0xa9, 0x42, 0x6f, 0x74, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.BotGenome)
	if err != nil {
		err = msgp.WrapError(err, "BotGenome")
		return
	}
	// write "BotOrgans"
	err = en.Append(0xa9, 0x42, 0x6f, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.BotOrgans)))
	if err != nil {
		err = msgp.WrapError(err, "BotOrgans")
		return
	}
	for za0001 := range z.BotOrgans {
		if z.BotOrgans[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.BotOrgans[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "BotOrgans", za0001)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SerBot) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "BotIndex"
	o = append(o, 0x86, 0xa8, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendUint64(o, z.BotIndex)
	// string "BotCoordX"
	o = append(o, 0xa9, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x58)
	o = msgp.AppendInt(o, z.BotCoordX)
	// string "BotCoordY"
	o = append(o, 0xa9, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x59)
	o = msgp.AppendInt(o, z.BotCoordY)
	// string "BotEnergy"
	o = append(o, 0xa9, 0x42, 0x6f, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79)
	o = msgp.AppendInt(o, z.BotEnergy)
	// string "BotGenome"
	o = append(o, 0xa9, 0x42, 0x6f, 0x74, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65)
	o = msgp.AppendBytes(o, z.BotGenome)
	// string "BotOrgans"
	o = append(o, 0xa9, 0x42, 0x6f, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.BotOrgans)))
	for za0001 := range z.BotOrgans {
		if z.BotOrgans[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.BotOrgans[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "BotOrgans", za0001)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SerBot) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BotIndex":
			z.BotIndex, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BotIndex")
				return
			}
		case "BotCoordX":
			z.BotCoordX, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BotCoordX")
				return
			}
		case "BotCoordY":
			z.BotCoordY, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BotCoordY")
				return
			}
		case "BotEnergy":
			z.BotEnergy, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BotEnergy")
				return
			}
		case "BotGenome":
			z.BotGenome, bts, err = msgp.ReadBytesBytes(bts, z.BotGenome)
			if err != nil {
				err = msgp.WrapError(err, "BotGenome")
				return
			}
		case "BotOrgans":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BotOrgans")
				return
			}
			if cap(z.BotOrgans) >= int(zb0002) {
				z.BotOrgans = (z.BotOrgans)[:zb0002]
			} else {
				z.BotOrgans = make([]*SerOrgan, zb0002)
			}
			for za0001 := range z.BotOrgans {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.BotOrgans[za0001] = nil
				} else {
					if z.BotOrgans[za0001] == nil {
						z.BotOrgans[za0001] = new(SerOrgan)
					}
					bts, err = z.BotOrgans[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "BotOrgans", za0001)
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SerBot) Msgsize() (s int) {
	s = 1 + 9 + msgp.Uint64Size + 10 + msgp.IntSize + 10 + msgp.IntSize + 10 + msgp.IntSize + 10 + msgp.BytesPrefixSize + len(z.BotGenome) + 10 + msgp.ArrayHeaderSize
	for za0001 := range z.BotOrgans {
		if z.BotOrgans[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.BotOrgans[za0001].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SerChunk) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ChunkIndex":
			z.ChunkIndex, err = dc.ReadUint()
			if err != nil {
				err = msgp.WrapError(err, "ChunkIndex")
				return
			}
		case "WorldSizeX":
			z.WorldSizeX, err = dc.ReadUint()
			if err != nil {
				err = msgp.WrapError(err, "WorldSizeX")
				return
			}
		case "WorldSizeY":
			z.WorldSizeY, err = dc.ReadUint()
			if err != nil {
				err = msgp.WrapError(err, "WorldSizeY")
				return
			}
		case "Ticks":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Ticks")
				return
			}
			if cap(z.Ticks) >= int(zb0002) {
				z.Ticks = (z.Ticks)[:zb0002]
			} else {
				z.Ticks = make([]*SerTick, zb0002)
			}
			for za0001 := range z.Ticks {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Ticks", za0001)
						return
					}
					z.Ticks[za0001] = nil
				} else {
					if z.Ticks[za0001] == nil {
						z.Ticks[za0001] = new(SerTick)
					}
					err = z.Ticks[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Ticks", za0001)
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SerChunk) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "ChunkIndex"
	err = en.Append(0x84, 0xaa, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint(z.ChunkIndex)
	if err != nil {
		err = msgp.WrapError(err, "ChunkIndex")
		return
	}
	// write "WorldSizeX"
	err = en.Append(0xaa, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x58)
	if err != nil {
		return
	}
	err = en.WriteUint(z.WorldSizeX)
	if err != nil {
		err = msgp.WrapError(err, "WorldSizeX")
		return
	}
	// write "WorldSizeY"
	err = en.Append(0xaa, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x59)
	if err != nil {
		return
	}
	err = en.WriteUint(z.WorldSizeY)
	if err != nil {
		err = msgp.WrapError(err, "WorldSizeY")
		return
	}
	// write "Ticks"
	err = en.Append(0xa5, 0x54, 0x69, 0x63, 0x6b, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Ticks)))
	if err != nil {
		err = msgp.WrapError(err, "Ticks")
		return
	}
	for za0001 := range z.Ticks {
		if z.Ticks[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Ticks[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Ticks", za0001)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SerChunk) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "ChunkIndex"
	o = append(o, 0x84, 0xaa, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendUint(o, z.ChunkIndex)
	// string "WorldSizeX"
	o = append(o, 0xaa, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x58)
	o = msgp.AppendUint(o, z.WorldSizeX)
	// string "WorldSizeY"
	o = append(o, 0xaa, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x59)
	o = msgp.AppendUint(o, z.WorldSizeY)
	// string "Ticks"
	o = append(o, 0xa5, 0x54, 0x69, 0x63, 0x6b, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Ticks)))
	for za0001 := range z.Ticks {
		if z.Ticks[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Ticks[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Ticks", za0001)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SerChunk) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ChunkIndex":
			z.ChunkIndex, bts, err = msgp.ReadUintBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ChunkIndex")
				return
			}
		case "WorldSizeX":
			z.WorldSizeX, bts, err = msgp.ReadUintBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WorldSizeX")
				return
			}
		case "WorldSizeY":
			z.WorldSizeY, bts, err = msgp.ReadUintBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WorldSizeY")
				return
			}
		case "Ticks":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ticks")
				return
			}
			if cap(z.Ticks) >= int(zb0002) {
				z.Ticks = (z.Ticks)[:zb0002]
			} else {
				z.Ticks = make([]*SerTick, zb0002)
			}
			for za0001 := range z.Ticks {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Ticks[za0001] = nil
				} else {
					if z.Ticks[za0001] == nil {
						z.Ticks[za0001] = new(SerTick)
					}
					bts, err = z.Ticks[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Ticks", za0001)
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SerChunk) Msgsize() (s int) {
	s = 1 + 11 + msgp.UintSize + 11 + msgp.UintSize + 11 + msgp.UintSize + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Ticks {
		if z.Ticks[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Ticks[za0001].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SerOrgan) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ParentBotIndex":
			z.ParentBotIndex, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "ParentBotIndex")
				return
			}
		case "OrganIndex":
			z.OrganIndex, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "OrganIndex")
				return
			}
		case "OrganCoordX":
			z.OrganCoordX, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "OrganCoordX")
				return
			}
		case "OrganCoordY":
			z.OrganCoordY, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "OrganCoordY")
				return
			}
		case "OrganEnergy":
			z.OrganEnergy, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "OrganEnergy")
				return
			}
		case "OrganGenome":
			z.OrganGenome, err = dc.ReadBytes(z.OrganGenome)
			if err != nil {
				err = msgp.WrapError(err, "OrganGenome")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SerOrgan) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "ParentBotIndex"
	err = en.Append(0x86, 0xae, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ParentBotIndex)
	if err != nil {
		err = msgp.WrapError(err, "ParentBotIndex")
		return
	}
	// write "OrganIndex"
	err = en.Append(0xaa, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.OrganIndex)
	if err != nil {
		err = msgp.WrapError(err, "OrganIndex")
		return
	}
	// write "OrganCoordX"
	err = en.Append(0xab, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x58)
	if err != nil {
		return
	}
	err = en.WriteInt(z.OrganCoordX)
	if err != nil {
		err = msgp.WrapError(err, "OrganCoordX")
		return
	}
	// write "OrganCoordY"
	err = en.Append(0xab, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x59)
	if err != nil {
		return
	}
	err = en.WriteInt(z.OrganCoordY)
	if err != nil {
		err = msgp.WrapError(err, "OrganCoordY")
		return
	}
	// write "OrganEnergy"
	err = en.Append(0xab, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79)
	if err != nil {
		return
	}
	err = en.WriteInt(z.OrganEnergy)
	if err != nil {
		err = msgp.WrapError(err, "OrganEnergy")
		return
	}
	// write "OrganGenome"
	err = en.Append(0xab, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.OrganGenome)
	if err != nil {
		err = msgp.WrapError(err, "OrganGenome")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SerOrgan) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "ParentBotIndex"
	o = append(o, 0x86, 0xae, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendUint64(o, z.ParentBotIndex)
	// string "OrganIndex"
	o = append(o, 0xaa, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendUint64(o, z.OrganIndex)
	// string "OrganCoordX"
	o = append(o, 0xab, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x58)
	o = msgp.AppendInt(o, z.OrganCoordX)
	// string "OrganCoordY"
	o = append(o, 0xab, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x59)
	o = msgp.AppendInt(o, z.OrganCoordY)
	// string "OrganEnergy"
	o = append(o, 0xab, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79)
	o = msgp.AppendInt(o, z.OrganEnergy)
	// string "OrganGenome"
	o = append(o, 0xab, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65)
	o = msgp.AppendBytes(o, z.OrganGenome)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SerOrgan) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ParentBotIndex":
			z.ParentBotIndex, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ParentBotIndex")
				return
			}
		case "OrganIndex":
			z.OrganIndex, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OrganIndex")
				return
			}
		case "OrganCoordX":
			z.OrganCoordX, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OrganCoordX")
				return
			}
		case "OrganCoordY":
			z.OrganCoordY, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OrganCoordY")
				return
			}
		case "OrganEnergy":
			z.OrganEnergy, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OrganEnergy")
				return
			}
		case "OrganGenome":
			z.OrganGenome, bts, err = msgp.ReadBytesBytes(bts, z.OrganGenome)
			if err != nil {
				err = msgp.WrapError(err, "OrganGenome")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SerOrgan) Msgsize() (s int) {
	s = 1 + 15 + msgp.Uint64Size + 11 + msgp.Uint64Size + 12 + msgp.IntSize + 12 + msgp.IntSize + 12 + msgp.IntSize + 12 + msgp.BytesPrefixSize + len(z.OrganGenome)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SerTick) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TickIndex":
			z.TickIndex, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "TickIndex")
				return
			}
		case "Bots":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Bots")
				return
			}
			if cap(z.Bots) >= int(zb0002) {
				z.Bots = (z.Bots)[:zb0002]
			} else {
				z.Bots = make([]*SerBot, zb0002)
			}
			for za0001 := range z.Bots {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Bots", za0001)
						return
					}
					z.Bots[za0001] = nil
				} else {
					if z.Bots[za0001] == nil {
						z.Bots[za0001] = new(SerBot)
					}
					err = z.Bots[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Bots", za0001)
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SerTick) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "TickIndex"
	err = en.Append(0x82, 0xa9, 0x54, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.TickIndex)
	if err != nil {
		err = msgp.WrapError(err, "TickIndex")
		return
	}
	// write "Bots"
	err = en.Append(0xa4, 0x42, 0x6f, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Bots)))
	if err != nil {
		err = msgp.WrapError(err, "Bots")
		return
	}
	for za0001 := range z.Bots {
		if z.Bots[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Bots[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Bots", za0001)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SerTick) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "TickIndex"
	o = append(o, 0x82, 0xa9, 0x54, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendUint64(o, z.TickIndex)
	// string "Bots"
	o = append(o, 0xa4, 0x42, 0x6f, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Bots)))
	for za0001 := range z.Bots {
		if z.Bots[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Bots[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Bots", za0001)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SerTick) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TickIndex":
			z.TickIndex, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TickIndex")
				return
			}
		case "Bots":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bots")
				return
			}
			if cap(z.Bots) >= int(zb0002) {
				z.Bots = (z.Bots)[:zb0002]
			} else {
				z.Bots = make([]*SerBot, zb0002)
			}
			for za0001 := range z.Bots {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Bots[za0001] = nil
				} else {
					if z.Bots[za0001] == nil {
						z.Bots[za0001] = new(SerBot)
					}
					bts, err = z.Bots[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Bots", za0001)
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SerTick) Msgsize() (s int) {
	s = 1 + 10 + msgp.Uint64Size + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Bots {
		if z.Bots[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Bots[za0001].Msgsize()
		}
	}
	return
}
